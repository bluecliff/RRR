cscope 15 $HOME/RRR               0000038877
	@bitvector.cpp

1 
	~"bôve˘‹.h
"

2 
	~<c°dlib
>

4 
	gbôvec_t
::
	$bôvec_t
()

6 
this
->
bô_size
=0;

7 
bôvec
.
	`push_back
(0);

8 
	}
}

10 
	gbôvec_t
::
	$£tbôs
(
k
, 
u64
 
v
)

12 
i
 = 
bô_size
/
D
;

13 
j
 = 
bô_size
%
D
;

15 
hﬁe

D
 - 
j
;

17 if(
hﬁe
 >
k
)

19 
bôvec
[
i
] |(
v
 << 
j
);

20 
bô_size
+=
k
;

22 if(
hﬁe
 =
k
)

24 
bôvec
[
i
] |(
v
 << 
j
);

25 
bô_size
+=
k
;

26 
bôvec
.
	`push_back
(0);

30 
bôvec
.
	`push_back
(0);

31 
bôvec
[
i
] |(
v
 << 
j
);

32 
bôvec
[
i
+1] |(
v
 >> 
hﬁe
);

33 
bô_size
+=
k
;

35 
	}
}

37 
u64
 
	gbôvec_t
::
	$gëbôs
(
u64
 
ödex
,
k
)

39 if(
ödex
 > 
bô_size
)

41 
	`exô
(-1);

43 
i
 = 
ödex
/
D
;

44 
j
 = 
ödex
%
D
;

46 
hﬁe

D
-
j
;

48 if(
hﬁe
 >
k
)

50 
u64
 
ªs
 = 
bôvec
[
i
] >> 
j
;

51 
ªs
 &((0UL-1Ë>> (
D
-
k
));

52  
ªs
;

56 
u64
 
ªs_low
 = 
bôvec
[
i
] >> 
j
;

57 
u64
 
ªs_high
 = 
bôvec
[
i
+1] << 
hﬁe
;

58 
ªs_high
 &((0UL-1)>>(
D
-
k
));

60  
ªs_low
+
ªs_high
;

62 
	}
}

	@bitvector.h

8 #i‚de‡
BIT_VECTOR_H_


9 
	#BIT_VECTOR_H_


	)

11 
	~"ty≥def.h
"

13 
	~<f°ªam
>

14 
	~<ve˘‹
>

16 
usög
 
«me•a˚
 
	g°d
;

22 ˛as†
	cbôvec_t


24 
	mpublic
:

25 
bôvec_t
();

32 
£tbôs
(
k
,
u64
 
v
);

41 
u64
 
gëbôs
(u64 
ödex
, 
k
);

42 
	m¥iv©e
:

46 
ve˘‹
<
u64
> 
bôvec
;

50 
u64
 
	mbô_size
;

	@commons.cpp

9 
	~"comm⁄s.h
"

10 
u64
 
	$p›cou¡
(
u64
 
x
)

12 
u64
 
r
;

14 
r
 = 
x
;

15 
r
 = ((r & 0xaaaaaaaaaaaaaaaa)>>1) + (r & 0x5555555555555555);

16 
r
 = ((r & 0xcccccccccccccccc)>>2) + (r & 0x3333333333333333);

17 
r
 = ((r>>4) +Ñ) & 0x0f0f0f0f0f0f0f0f;

19 
r
 *= 0x0101010101010101;

20 
r
 >>= 64-8;

22  
r
;

23 
	}
}

25 
	$ˇl
(
n
, 
m
)

27 
i
, 
a
, 
b
, 
p
;

28 if(
n
<
m
){
i
=m;m=n;n=i;}

29 
p
=1;

30 
a
=
n
-
m
<m?n-m:m;

31 
b
=
n
-
m
>m?n-m:m;

32 
i
=1; i<=
a
; i++)

33 
p
+ı*
b
/
i
;

34  
p
;

35 
	}
}

37 
	$blog
(
i64
 
x
)

39 
l
;

40 
l
 = -1;

41 
x
>0) {

42 
x
>>=1;

43 
l
++;

45  
l
;

46 
	}
}

	@commons.h

8 #i‚de‡
COMMONS_H_


9 
	#COMMONS_H_


	)

12 
	~"ty≥def.h
"

14 #ifde‡
__SSE4_2__


15 
	~<smmöåö.h
>

16 
	#POPCOUNT
(
x
Ë
	`_mm_p›˙t_u64
(x)

	)

18 
	#POPCOUNT
(
x
Ë
	`p›cou¡
(x)

	)

22 
u64
 
p›cou¡
(u64 
x
);

32 
ˇl
(
n
, 
m
);

34 
blog
(
i64
 
x
);

	@compactIntArray.cpp

8 
	~"com∑˘I¡Aºay.h
"

9 
	~<cm©h
>

10 
	~<°rög.h
>

13 
	gcom∑˘I¡Aºay
::
	$com∑˘I¡Aºay
()

15 
this
->
¨øy
=
NULL
;

16 
this
->
size
=0;

17 
this
->
w‹dsize
=0;

18 
this
->
ö√rsize
 = 0;

19 
	}
}

28 
	gcom∑˘I¡Aºay
::
	$com∑˘I¡Aºay
(
uöt
* 
¨r
,uöà
n
,uöà
max
)

30 
this
->
w‹dsize
=(
uöt
)
	`log2
(
max
)+1;

31 
this
->
size
=
n
;

32 
this
->
ö√rsize
=(
n
*this->
w‹dsize
)/(8*(
ul⁄g
))+1;

33 
this
->
¨øy
=
√w
 
ul⁄g
[this->
ö√rsize
];

34 
	`mem£t
(
this
->
¨øy
,0,(
ul⁄g
)*this->
ö√rsize
);

35 
this
->
	`öô
(
¨r
);

36 
	}
}

44 
	gcom∑˘I¡Aºay
::
	$com∑˘I¡Aºay
(
uöt
 
n
, uöà
max
)

46 
this
->
size
 = 
n
;

47 
this
->
w‹dsize
 = (
uöt
)
	`log2
(
max
) + 1;

48 
this
->
ö√rsize
 = (
n
 *Åhis->
w‹dsize
Ë/ (8 * (
ul⁄g
)) + 1;

49 
this
->
¨øy
 = 
√w
 
ul⁄g
[this->
ö√rsize
];

50 
	`mem£t
(
this
->
¨øy
,0,(
ul⁄g
)*this->
ö√rsize
);

51 
	}
}

58 
	gcom∑˘I¡Aºay
::
	$com∑˘I¡Aºay
(
com∑˘I¡Aºay
& 
obje˘
):
	`size
(obje˘.
size
), 
	`w‹dsize
(obje˘.
w‹dsize
), 
	$ö√rsize
(
obje˘
.
ö√rsize
)

60 
this
->
¨øy
 = 
√w
 
ul⁄g
[
ö√rsize
];

61 
	`mem˝y
(
this
->
¨øy
, 
obje˘
.¨øy, 
ö√rsize
);

62 
	}
}

67 
	gcom∑˘I¡Aºay
::~
	$com∑˘I¡Aºay
()

69 if(
this
->
¨øy
)

71 
dñëe
[] 
this
->
¨øy
;

72 
this
->
¨øy
=
NULL
;

74 
	}
}

76 
	gcom∑˘I¡Aºay
::
	$öô
(
uöt
* 
¨r
)

78 
uöt
 
i
=0;i<
this
->
size
;i++)

80 
this
->
	`£tfûed
(
i
,
¨r
[i]);

82 
	}
}

84 
boﬁ
 
	gcom∑˘I¡Aºay
::
wrôe
(
°d
::
of°ªam
& 
fout
)

86 
fout
.
wrôe
((*)&
size
, (size));

87 
	gfout
.
wrôe
((*)&
w‹dsize
, (wordsize));

88 
	gfout
.
wrôe
((*)&
ö√rsize
, (innersize));

90 
	gfout
.
wrôe
((*)
¨øy
, (*¨øyË* 
ö√rsize
);

91 if(
	gfout
.
bad
())

93  
	gÁl£
;

97  
	gåue
;

101 
boﬁ
 
	gcom∑˘I¡Aºay
::
ªad
(
°d
::
if°ªam
& 
fö
)

103 
fö
.
ªad
((*)&
size
, (size));

104 
	gfö
.
ªad
((*)&
w‹dsize
, (wordsize));

105 
	gfö
.
ªad
((*)&
ö√rsize
, (innersize));

106 
	gthis
->
	g¨øy
 = 
√w
 
ul⁄g
[
this
->
ö√rsize
];

107 
	gfö
.
ªad
((*)
¨øy
, (*¨øyË* 
ö√rsize
);

109 if(
	gfö
.
bad
(Ë|| fö.
Áû
())

111  
	gÁl£
;

115  
	gåue
;

119 
	gcom∑˘I¡Aºay
::
	$£tfûed
(
uöt
 
ödex
,
ul⁄g
 
vÆue
)

121 
uöt
 
i
=(
ödex
*
this
->
w‹dsize
)/((
ul⁄g
)*8);

122 
uöt
 
j
=(
ödex
*
this
->
w‹dsize
)%((
ul⁄g
)*8);

123 
uöt
 
hﬁe
=((
ul⁄g
)*8)-
j
;

124 if(
hﬁe
 >
this
->
w‹dsize
)

126 
this
->
¨øy
[
i
]=(
vÆue
<<
j
) | (this->array[i]);

130 
this
->
¨øy
[
i
]=(
vÆue
<<
j
) | (this->array[i]);

131 
this
->
¨øy
[
i
+1]=(
vÆue
 >> 
hﬁe
) | (this->array[i+1]);

133 
	}
}

135 
ul⁄g
 
	gcom∑˘I¡Aºay
::
	$gëfûed
(
uöt
 
ödex
) const

137 
uöt
 
i
=(
ödex
*
this
->
w‹dsize
)/((
ul⁄g
)*8);

138 
uöt
 
j
=(
ödex
*
this
->
w‹dsize
)%((
ul⁄g
)*8);

139 
uöt
 
hﬁe
=((
ul⁄g
)*8)-
j
;

140 if(
hﬁe
 >
this
->
w‹dsize
)

142 
ul⁄g
 
ªs
=
this
->
¨øy
[
i
];

143 
ul⁄g
 
ãmp
=(1UL<<
this
->
w‹dsize
)-1;

144 
ªs
=(‘e†>> 
j
Ë& 
ãmp
);

145  
ªs
;

149 
ul⁄g
 
ªs
=(
this
->
¨øy
[
i
] >> 
j
);

150 
ul⁄g
 
ãmp
=(1UL<<(
this
->
w‹dsize
-
hﬁe
))-1;

151 
ãmp
Òem∞& 
this
->
¨øy
[
i
+1];

152 
ªs
Ùe†| (
ãmp
<<
hﬁe
);

153  
ªs
;

155 
	}
}

157 
uöt
 
	gcom∑˘I¡Aºay
::
	$gësize
()

159  
this
->
size
;

160 
	}
}

162 
	gcom∑˘I¡Aºay
::
	$£t
(
uöt
 
ödex
, 
ul⁄g
 
vÆue
)

166 
uöt
 
i
=(
ödex
*
this
->
w‹dsize
)/((
ul⁄g
)*8);

167 
uöt
 
j
=(
ödex
*
this
->
w‹dsize
)%((
ul⁄g
)*8);

168 
uöt
 
hﬁe
=((
ul⁄g
)*8)-
j
;

169 if(
hﬁe
 >
this
->
w‹dsize
)

172 
ul⁄g
 
mask1
 = 0UL-1UL;

173 
ul⁄g
 
mask2
 = 
mask1
;

174 
mask1
 = (
j
+
w‹dsize
)<((
ul⁄g
)*8)?(mask1 << (j+wordsize)):0;

175 
mask2
 = (
j
==0)? 0:(mask2 >> ((
ul⁄g
)*8-j));

176 
this
->
¨øy
[
i
] =Åhis->¨øy[i] & (
mask1
 | 
mask2
);

178 
this
->
¨øy
[
i
] = (
vÆue
 << 
j
) | (this->array[i]);

183 
ul⁄g
 
mask1
 = 0UL-1UL;

184 
ul⁄g
 
mask2
 = 
mask1
;

185 
mask1
 = mask1 >> ((
ul⁄g
)*8-
j
);

186 
mask2
 = mask2 << (
w‹dsize
-
hﬁe
);

187 
this
->
¨øy
[
i
]Òhis->¨øy[i] & 
mask1
;

188 
this
->
¨øy
[
i
+1]Òhis->¨øy[i+1] & 
mask2
;

189 
this
->
¨øy
[
i
]=(
vÆue
<<
j
) | (this->array[i]);

190 
this
->
¨øy
[
i
+1]=(
vÆue
 >> 
hﬁe
) | (this->array[i+1]);

192 
	}
}

194 
uöt
 
	gcom∑˘I¡Aºay
::
	$gë
(
uöt
 
ödex
) const

196  
this
->
	`gëfûed
(
ödex
);

197 
	}
}

	@compactIntArray.h

9 #i‚de‡
GENERAL_INT_H_


10 
	#GENERAL_INT_H_


	)

12 
	~<f°ªam
>

13 
	tul⁄g
;

14 
	tuöt
;

19 ˛as†
	ccom∑˘I¡Aºay


21 
	mpublic
:

24 ˛as†
	cRe„ªn˚


26 
‰õnd
 
˛ass
 
com∑˘I¡Aºay
;

27 
	mpublic
:

28 
›î©‹
 = (
uöt
 
vÆue
)

30 
_pCom∑˘I¡Aºay
->
£t
(
ödex
,
vÆue
);

33 
›î©‹
 
uöt
(Ëc⁄°{  
	m_pCom∑˘I¡Aºay
->
gë
(
ödex
);};

34 
	m¥iv©e
:

35 
Re„ªn˚
(
com∑˘I¡Aºay
& 
_com∑˘_öt_¨øy
,
uöt
 
_ödex
):
_pCom∑˘I¡Aºay
(&_com∑˘_öt_¨øy),
ödex
(_index)

39 
com∑˘I¡Aºay
* 
	m_pCom∑˘I¡Aºay
;

40 
uöt
 
	mödex
;

45 
com∑˘I¡Aºay
();

52 
com∑˘I¡Aºay
(
uöt
 
n
, uöà
max
);

60 
com∑˘I¡Aºay
(
uöt
* 
¨r
, uöà
n
,uöà
max
);

66 
com∑˘I¡Aºay
(com∑˘I¡Aºay& 
obje˘
);

70 ~
com∑˘I¡Aºay
();

79 
Re„ªn˚
 
	g›î©‹
[](
uöt
 
	gödex
)

81  (
Re„ªn˚
(*
this
,
ödex
));

84 
uöt
 
	g›î©‹
[](uöà
	gödex
) const

86  
	gthis
->
gë
(
ödex
);

95 
boﬁ
 
wrôe
(
°d
::
of°ªam
& 
fout
);

103 
boﬁ
 
ªad
(
°d
::
if°ªam
& 
fö
);

109 
uöt
 
gësize
();

117 
£t
(
uöt
 
ödex
,
ul⁄g
 
vÆue
);

125 
uöt
 
	$gë
(
uöt
 
ödex
) const;

126 
¥iv©e
:

130 
ul⁄g
* 
¨øy
;

134 
uöt
 
size
;

138 
uöt
 
w‹dsize
;

142 
uöt
 
ö√rsize
;

149 
	`öô
(
uöt
* 
¨r
);

156 
	`£tfûed
(
uöt
 
ödex
,
ul⁄g
 
vÆue
);

165 
ul⁄g
 
	$gëfûed
(
uöt
 
ödex
) const;

166 
	}
};

	@dtable.cpp

8 
	~"dèbÀ.h
"

9 
	~"com∑˘I¡Aºay.h
"

10 
	~"comm⁄s.h
"

12 
	~<cm©h
>

13 
	gdèbÀ
::
	$d©bÀ
()

15 
this
->
size
=0;

16 
this
->
b
=0;

17 
this
->
s
=0;

19 
this
->
p
=
NULL
;

20 
this
->
r
=
NULL
;

22 
this
->
l
=
NULL
;

23 
this
->
q
=
NULL
;

24 
	}
}

26 
	gdèbÀ
::
	$dèbÀ
(
u64
* 
bôvec
,* 
ønk
,
n
)

28 
this
->
s
=
	`pow
(
	`blog
(
n
),2);

29 
this
->
b
=
	`blog
(
n
)/2;

30 
this
->
size
=
n
;

31 
	}
}

33 ~
	gdèbÀ
::
	$dèbÀ
()

36 
this
->
b
=0;

37 
this
->
s
=0;

39 
dñëe
 
this
->
p
;

40 
dñëe
 
this
->
r
;

41 
dñëe
 
this
->
l
;

42 
dñëe
 
this
->
q
;

43 
	}
}

	@dtable.h

8 #i‚de‡
DTABLE_H_


9 
	#DTABLE_H_


	)

10 
	~"ty≥def.h
"

12 
˛ass
 
	gcom∑˘I¡Aºay
;

14 ˛as†
	cdèbÀ


16 
	mpublic
:

17 
dèbÀ
();

25 
dèbÀ
(
u64
* 
bôvec
,* 
ønk
,
n
);

26 ~
dèbÀ
();

33 
boﬁ
 
öô
();

41 
£¨chd
(
i
,*
o
,* 
c
);

49 
£¨chønk
(
i
);

50 
	m¥iv©e
:

51 
bôvec_t
 
d
;

52 
	msize
;

56 
	mb
;

60 
	ms
;

65 
com∑˘I¡Aºay
* 
	mp
;

69 
com∑˘I¡Aºay
* 
	mr
;

74 
com∑˘I¡Aºay
* 
	ml
;

78 
com∑˘I¡Aºay
* 
	mq
;

	@gtable.cpp

8 
	~"gèbÀ.h
"

9 
	~"comm⁄s.h
"

13 
	ggèbÀ
::
	$gèbÀ
()

15 
this
->
g
=
NULL
;

16 
this
->
b
=0;

17 
this
->
size
=0;

18 
this
->
bôs_size
=
NULL
;

19 
this
->
cm≠
=
NULL
;

20 
	}
}

22 
	ggèbÀ
::
	$gèbÀ
(
b
)

24 
this
->
b
=b;

26 
bôs_size
=
√w
 [
b
+1];

27 
	`mem£t
(
bôs_size
,0,()*(
b
+1));

28 
this
->
	`makecm≠
();

29 
i64
 
i
=1;i<=
b
;i++)

31 
bôs_size
[
i
]=bôs_size[i-1]+(
	`ˇl
(
b
,i)*(
	`blog
(i)+1)*b);

33 
this
->
size
=
bôs_size
[
b
]/
D
+1;

34 
this
->
g
=
√w
 
u64
[this->
size
];

36 
u64
 
i
=1;i<(1UL<<
this
->
b
);++i)

39 
k
=
	`p›cou¡
(
i
);

40 
t
=
this
->
cm≠
[
i
]-1;

42 
off£t
=
bôs_size
[
k
-1]+
t
*(
	`blog
(k)+1)*
b
;

44 
j
=1,
u64
 
ønk
=0;j<=
b
;++j)

47 
ønk
+=(
i
 & (1UL << (
j
-1)));

48 
m
=
off£t
/
D
;

49 
n
=
off£t
%
D
;

51 if–(
D
-
n
Ë>(
	`blog
(
k
)+1))

52 
this
->
	`£tbôs
(
m
,
n
,
ønk
);

55 
this
->
	`£tbôs
(
m
,
n
,
ønk
);

56 
this
->
	`£tbôs
(
m
+1,0,
ønk
>>(
D
-
l
));

58 
off£t
+=((
	`blog
(
k
)+1));

62 
	}
}

63 ~
	ggèbÀ
::
	$gèbÀ
()

65 
dñëe
[] 
this
->
g
;

66 
this
->
b
=0;

67 
this
->
size
=0;

68 
dñëe
[] 
this
->
cm≠
;

69 
dñëe
[] 
this
->
bôs_size
;

70 
	}
}

72 
	ggèbÀ
::
	$makecm≠
()

74 
u64
 
tŸÆ
=1UL<<
this
->
b
;

75 
this
->
cm≠
=
√w
 [
tŸÆ
];

76 * 
sum
=
√w
 [
b
+1];

77 
	`mem£t
(
sum
,0,()*(
b
+1));

78 
u64
 
i
=1;i<
tŸÆ
;i++)

80 
this
->
cm≠
[
i
]=++
sum
[
	`p›cou¡
(i)];

82 
dñëe
[] 
sum
;

83 
	}
}

85 
	ggèbÀ
::
	$£tbôs
(
i
,
l
,
u64
 
v
)

87 
this
->
g
[
i
]=—his->g[i] | (
v
 << 
l
));

88 
	}
}

90 
	ggèbÀ
::
	$£¨ch
(
i
,
o
, 
k
)

93 if(
i
==0)

95 
off£t
=
this
->
bôs_size
[
i
-1]+
o
*
b
*(
	`blog
(i)+1)+
k
*(blog(i)+1);

98 
m
=
off£t
/
D
;

99 
n
=
off£t
%
D
;

100 if((
D
-
n
)>=(
	`blog
(
i
)+1))

101  (
g
[
m
] << (
D
-
n
-(
	`blog
(
i
)+1)) >> (D-(blog(i)+1)));

104 
low
(
g
[
m
] >> 
n
);

105 
high
(
g
[
m
+1] << (
D
-((
	`blog
(
i
)+1)-(D-
n
)))) >> (D-(blog(i)+1));

106  
low
+
high
;

108 
	}
}

	@gtable.h

8 #i‚de‡
GTABLE_H_


9 
	#GTABLE_H_


	)

11 
	~"ty≥def.h
"

21 ˛as†
	cgèbÀ


23 
	mpublic
:

24 
gèbÀ
();

25 
gèbÀ
(
b
);

26 ~
gèbÀ
();

36 
£¨ch
(
i
,
o
,
k
);

37 
	m¥iv©e
:

38 
u64
* 
g
;

39 
	mb
;

40 
	msize
;

42 * 
	mcm≠
;

44 * 
	mbôs_size
;

52 
£tbôs
(
i
,
l
,
u64
 
v
);

56 
makecm≠
();

	@test_bitvec_t.cpp

1 
	~<io°ªam
>

2 
usög
 
«me•a˚
 
	g°d
;

3 
	~"bôve˘‹.h
"

4 
	~"comm⁄s.h
"

6 
	$maö
()

8 
bôvec_t
 
v
;

9 
i
=1; i< 100;i++)

11 
v
.
	`£tbôs
(
	`blog
(
i
)+1,(
u64
)i);

13 
off£t
=0;

14 
i
=1;i < 100;i++)

16 
k
=
	`blog
(
i
)+1;

17 
cout
<<
v
.
	`gëbôs
(
off£t
,
k
)<<" ";

18 
off£t
+=
k
;

20 
cout
<<
ídl
;

22 
	}
}

	@typedef.h

9 #i‚de‡
TYPEDEF_H_


10 
	#TYPEDEF_H_


	)

11 
	~<°döt.h
>

13 
uöt64_t
 
	tu64
;

14 
öt64_t
 
	ti64
;

16 
	#D
 ((
u64
)*8)

	)

	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_POSIX


101 #unde‡
__USE_POSIX2


102 #unde‡
__USE_POSIX199309


103 #unde‡
__USE_POSIX199506


104 #unde‡
__USE_XOPEN


105 #unde‡
__USE_XOPEN_EXTENDED


106 #unde‡
__USE_UNIX98


107 #unde‡
__USE_XOPEN2K


108 #unde‡
__USE_XOPEN2KXSI


109 #unde‡
__USE_XOPEN2K8


110 #unde‡
__USE_XOPEN2K8XSI


111 #unde‡
__USE_LARGEFILE


112 #unde‡
__USE_LARGEFILE64


113 #unde‡
__USE_FILE_OFFSET64


114 #unde‡
__USE_BSD


115 #unde‡
__USE_SVID


116 #unde‡
__USE_MISC


117 #unde‡
__USE_ATFILE


118 #unde‡
__USE_GNU


119 #unde‡
__USE_REENTRANT


120 #unde‡
__USE_FORTIFY_LEVEL


121 #unde‡
__FAVOR_BSD


122 #unde‡
__KERNEL_STRICT_NAMES


126 #i‚de‡
_LOOSE_KERNEL_NAMES


127 
	#__KERNEL_STRICT_NAMES


	)

131 
	#__USE_ANSI
 1

	)

140 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


141 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

142 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

144 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

149 #i‡
deföed
 
_BSD_SOURCE
 && \

150 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

151 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

152 
	#__FAVOR_BSD
 1

	)

156 #ifde‡
_GNU_SOURCE


157 #unde‡
_ISOC95_SOURCE


158 
	#_ISOC95_SOURCE
 1

	)

159 #unde‡
_ISOC99_SOURCE


160 
	#_ISOC99_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_BSD_SOURCE


172 
	#_BSD_SOURCE
 1

	)

173 #unde‡
_SVID_SOURCE


174 
	#_SVID_SOURCE
 1

	)

175 #unde‡
_ATFILE_SOURCE


176 
	#_ATFILE_SOURCE
 1

	)

181 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

182 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

183 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

184 
	#_BSD_SOURCE
 1

	)

185 
	#_SVID_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

194 
	#__USE_ISOC99
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

200 
	#__USE_ISOC95
 1

	)

205 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

206 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

207 
	#_POSIX_SOURCE
 1

	)

208 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

209 
	#_POSIX_C_SOURCE
 2

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

211 
	#_POSIX_C_SOURCE
 199506L

	)

212 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

213 
	#_POSIX_C_SOURCE
 200112L

	)

215 
	#_POSIX_C_SOURCE
 200809L

	)

217 
	#__USE_POSIX_IMPLICITLY
 1

	)

220 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


221 
	#__USE_POSIX
 1

	)

224 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


225 
	#__USE_POSIX2
 1

	)

228 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

229 
	#__USE_POSIX199309
 1

	)

232 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

233 
	#__USE_POSIX199506
 1

	)

236 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

237 
	#__USE_XOPEN2K
 1

	)

238 #unde‡
__USE_ISOC95


239 
	#__USE_ISOC95
 1

	)

240 #unde‡
__USE_ISOC99


241 
	#__USE_ISOC99
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

245 
	#__USE_XOPEN2K8
 1

	)

246 #unde‡
_ATFILE_SOURCE


247 
	#_ATFILE_SOURCE
 1

	)

250 #ifdef 
_XOPEN_SOURCE


251 
	#__USE_XOPEN
 1

	)

252 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

253 
	#__USE_XOPEN_EXTENDED
 1

	)

254 
	#__USE_UNIX98
 1

	)

255 #unde‡
_LARGEFILE_SOURCE


256 
	#_LARGEFILE_SOURCE
 1

	)

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

258 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

259 
	#__USE_XOPEN2K8
 1

	)

260 
	#__USE_XOPEN2K8XSI
 1

	)

262 
	#__USE_XOPEN2K
 1

	)

263 
	#__USE_XOPEN2KXSI
 1

	)

264 #unde‡
__USE_ISOC95


265 
	#__USE_ISOC95
 1

	)

266 #unde‡
__USE_ISOC99


267 
	#__USE_ISOC99
 1

	)

270 #ifde‡
_XOPEN_SOURCE_EXTENDED


271 
	#__USE_XOPEN_EXTENDED
 1

	)

276 #ifde‡
_LARGEFILE_SOURCE


277 
	#__USE_LARGEFILE
 1

	)

280 #ifde‡
_LARGEFILE64_SOURCE


281 
	#__USE_LARGEFILE64
 1

	)

284 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

285 
	#__USE_FILE_OFFSET64
 1

	)

288 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


289 
	#__USE_MISC
 1

	)

292 #ifdef 
_BSD_SOURCE


293 
	#__USE_BSD
 1

	)

296 #ifdef 
_SVID_SOURCE


297 
	#__USE_SVID
 1

	)

300 #ifdef 
_ATFILE_SOURCE


301 
	#__USE_ATFILE
 1

	)

304 #ifdef 
_GNU_SOURCE


305 
	#__USE_GNU
 1

	)

308 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


309 
	#__USE_REENTRANT
 1

	)

312 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

313 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

314 #i‡
_FORTIFY_SOURCE
 > 1

315 
	#__USE_FORTIFY_LEVEL
 2

	)

317 
	#__USE_FORTIFY_LEVEL
 1

	)

320 
	#__USE_FORTIFY_LEVEL
 0

	)

324 
	~<bôs/¥edefs.h
>

327 
	#__STDC_ISO_10646__
 200009L

	)

335 #unde‡
__GNU_LIBRARY__


336 
	#__GNU_LIBRARY__
 6

	)

340 
	#__GLIBC__
 2

	)

341 
	#__GLIBC_MINOR__
 15

	)

343 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

344 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

347 #i‡
deföed
 
__GNUC__
 \

348 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

349 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

350 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

351 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

355 #i‚de‡
__ASSEMBLER__


356 #i‚de‡
_SYS_CDEFS_H


357 
	~<sys/cdefs.h
>

362 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


363 
	#__USE_LARGEFILE
 1

	)

364 
	#__USE_LARGEFILE64
 1

	)

370 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

371 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

372 && 
deföed
 
	g__exã∫_ölöe


373 
	#__USE_EXTERN_INLINES
 1

	)

378 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

379 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

380 && 
deföed
 
	g__exã∫_ölöe


381 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

389 
	~<gnu/°ubs.h
>

	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@
1
.
1
/usr/include
16
245
bitvector.cpp
bitvector.h
commons.cpp
commons.h
compactIntArray.cpp
compactIntArray.h
dtable.cpp
dtable.h
gtable.cpp
gtable.h
test_bitvec_t.cpp
typedef.h
/usr/include/stdint.h
/usr/include/string.h
/usr/include/features.h
/usr/include/xlocale.h
